"----------------------------------------------------------
" Plugins Settings
"----------------------------------------------------------

"Unite.vim
"
" 入力モードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
nnoremap <silent> <space>ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> <space>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> <space>ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> <space>um :<C-u>Unite file_mru -buffer-name=file_mru<CR>
" 常用セット
nnoremap <silent> <space>uu :<C-u>Unite file buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> <space>ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

function! Scouter(file,...) 
  let pat = '^\s*$\|^\s*"'
  let lines = readfile(a:file)
  if !a:0 || !a:1
    let lines = split(substitute(join(lines, "\n"), '\n\s*\\', '', 'g'), "\n")
  endif
  return len(filter(lines,'v:val !~ pat'))
endfunction
command! -bar -bang -nargs=? -complete=file Scouter
      \ echo Scouter(empty(<q-args>) ? $MYVIMRC : expand(<q-args>), <bang>0)

"au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q))))
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
endfunction



" appended on 09282011 edit .vimrc immediately
nnoremap <SPACE>. :<C-u>edit $MYVIMRC<CR>
nnoremap <SPACE>, :<C-u>edit ~/.zshrc<CR>
nnoremap <SPACE>s. :<C-u>source $MYVIMRC<CR>
nnoremap <SPACE>s, :<C-u>source ~/.zshrc<CR>

" w3m
let $PATH = $PATH . ':/opt/local/bin'

" rails.vim
let g:rails_level=4
let g:rails_default_file="app/controllers/application.rb"

" matrix.vim
nnoremap <silent> <space>m :<C-u>Matrix<CR>

" vim Scounter
function! Scouter(file, ...)
  let pat = '^\s*$\|^\s*"'
  let lines = readfile(a:file)
  if !a:0 || !a:1
    let lines = split(substitute(join(lines, "\n"), '\n\s*\\', '', 'g'), "\n")
  endif
  return len(filter(lines,'v:val !~ pat'))
endfunction
command! -bar -bang -nargs=? -complete=file Scouter
      \        echo Scouter(empty(<q-args>) ? $MYVIMRC : expand(<q-args>), <bang>0)
command! -bar -bang -nargs=? -complete=file GScouter
      \        echo Scouter(empty(<q-args>) ? $MYGVIMRC : expand(<q-args>), <bang>0)


" vim-ref
let g:ref_alc_cmd = 'w3m -dump %s'
let g:ref_alc_use_cache = 1
let g:ref_alc_encoding = 'Shift-JIS'
let g:ref_alc_start_linenumber = '45'
nnoremap <silent> <space>a :<C-u>Ref<SPACE>alc<SPACE>

" statusline.vim
" let hi_insert = 'hi StatusLine guifg=DarkBule guibg=DarkYellow gui=none ctermfg=Blue ctermbg=Yellow cterm=none'

" fugitive.vim
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" errormarker.vim
"let g:errormarker_errortext = '!!'
"let g:errormarker_warningtext = '??'
"let g:errormarker_errorgroup = 'Error'
"let g:errormarker_warninggroup = 'Todo'
"if has('win32') || has('win64')
"  let g:errormarker_erroricon = expand('~/.vim/signs/err.bmp')
"  let g:errormarker_warningicon = expand('~/.vim/signs/warn.bmp')
"else
"  let g:errormarker_erroricon = expand('~/.vim/signs/err.bmp')
"  let g:errormarker_warningicon = expand('~/.vim/signs/err.png')
"endif

" smartchr
inoremap <expr> = smartchr#loop('=', ' == ', ' => ',' -> ')
inoremap <expr> . smartchr#loop('.', '->', '...')

" vim-toggle
:let g:toggle_pairs = { 'and':'or', 'or':'and', 'if':'elseif', 'elseif':'else', 'else':'if' }

" neocomplcache quick_match
"imap <C-y> <Plug>(neocomplcache_start_unite_quick_match)

" appended on 12182011 quick space in normal mode
nnoremap <SPACE><SPACE><SPACE> :a<SPACE><ESC>

" appended on 01212012 erb % Completion
"inoremap <expr> % Lt_Percent_Completion()
"function! Lt_Percent_Completion()
"  if matchstr(getline('.'),'.',col('.') -1) == ">"
"    return "\%\%\<Left>"
"  else
"    return "\%"
"  endif
"endfunction

" appended on 01212012 vim-coffee-script
autocmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!

" appedned on 01242012 quickrun
let g:quickrun_config={}
let g:quickrun_config['coffee'] = {'command' : 'coffee', 'exec' : ['%c -cbp %s']}

" vim-powerline
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
let g:Powerline_symbols='fancy'

" ctags
let Tlist_Ctags_Cmd='/usr/local/Cellar/ctags/5.8/bin/ctags'

"自動でプレビューを表示する。TODO:うざくなってきたら手動にする。またはソースを追う時だけ自動に変更する。
let g:SrcExpl_RefreshTime   = 1
"プレビューウインドウの高さ
let g:SrcExpl_WinHeight     = 9
"tagsは自動で作成する
let g:SrcExpl_UpdateTags    = 1
"マッピング
let g:SrcExpl_RefreshMapKey = "<Space>"
let g:SrcExpl_GoBackMapKey  = "<C-b>"
nmap <F8> :SrcExplToggle<CR>

" minibufexpl.vim
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 
